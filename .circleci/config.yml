version: 2.1

#  Copyright (C) 2019-2020 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ 
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependencies are available
jobs:
  sonar-scanner:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: ubuntu:focal-20220113
    environment:
      TERM: xterm
      SONAR_DIR: /opt/sonarqube
      DEBIAN_FRONTEND: noninteractive
    # Set working directory
    working_directory: "/home/V2X-Hub"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      # Checkout branch
      - checkout
      - run:
          name: Setup Tools and Dependencies
          command: |
            set -x

            scripts/install_dependencies.sh
            apt-get install -y jq python3-pip
            pip3 install gcovr

            mkdir $SONAR_DIR
            apt-get install -y curl nodejs
            curl -o $SONAR_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
            curl -o $SONAR_DIR/build-wrapper.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
            cd $SONAR_DIR
            unzip $SONAR_DIR/sonar-scanner.zip -d .
            unzip $SONAR_DIR/build-wrapper.zip -d .
            mv $(ls $SONAR_DIR | grep "sonar-scanner-") $SONAR_DIR/sonar-scanner/
            mv $(ls $SONAR_DIR | grep "build-wrapper-") $SONAR_DIR/build-wrapper/
            echo 'export PATH=$PATH:$SONAR_DIR/sonar-scanner/bin/:$SONAR_DIR/build-wrapper/' >> $SONAR_DIR/init-env.sh
      - run:
          name: Build Ext Components
          command: |
            cd ext
            ./build.sh
            ../container/library.sh
            ldconfig
      - run:
          name: Run Tests & Generate Gcovr Reports
          command: |
            source ${SONAR_DIR}/init-env.sh
            mkdir bw-output
            cd src
            build-wrapper-linux-x86-64 --out-dir ../bw-output bash build.sh
            ./coverage.sh
      - run:
          name: Run Sonar Scanner
          command: |
            source ${SONAR_DIR}/init-env.sh
            echo $PATH
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH/\//-} -Dsonar.pullrequest.key=${PR_NUM}
            fi 
  docker_build_push:
    machine:
      image: ubuntu-2004:202201-02
    steps:
     - checkout
     - run: 
        name: Docker Build
        # Build v2xhub and php docker branch images
        command: |
          docker build -t v2xhubamd:ci-build .  
          docker build -f docker/Dockerfile-php -t php:ci-build .
          cd ./tools/port-drayage-webservice/
          docker build -t port-drayage-webservice:ci-build .
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
              circleci-agent step halt
          fi          
     - run:
          name: Docker Push
          # Push v2xhub and php docker images to usdotfhwaops dockerhub
          command: | 
            if [ "$CIRCLE_BRANCH" = "develop" ]; then
              DOCKER_TAG="latest"
            else
              DOCKER_TAG=${CIRCLE_BRANCH/\//-}
            fi
            docker tag v2xhubamd:ci-build usdotfhwaops/v2xhubamd:${DOCKER_TAG}
            docker tag php:ci-build usdotfhwaops/php:${DOCKER_TAG}
            docker tag port-drayage-webservice:ci-build usdotfhwaops/port-drayage-webservice:${DOCKER_TAG}
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
            docker push usdotfhwaops/v2xhubamd:${DOCKER_TAG}
            docker push usdotfhwaops/php:${DOCKER_TAG}
            docker push usdotfhwaops/port-drayage-webservice:${DOCKER_TAG}
  arm_build_push :
   machine:
    image: ubuntu-2004:202101-01
   resource_class: arm.medium
   steps:
     - checkout
     - run: 
        name: Docker Build
        # Run MYSQL image and build v2xhub docker image
        command: |
          docker build -t v2xhubarm:ci-build .
          docker build -f docker/Dockerfile-php -t php_arm:ci-build .
          cd ./tools/port-drayage-webservice/
          docker build -f Dockerfile-arm -t port-drayage-webservice_arm:ci-build .
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
              circleci-agent step halt
          fi          
     - run: 
        name: Docker Push
        # Push v2xhub docker image to usdotfhwaops dockerhub
        command: | 
          if [ "$CIRCLE_BRANCH" = "develop" ]; then
            DOCKER_TAG="latest"
          else
            DOCKER_TAG=${CIRCLE_BRANCH/\//-}
          fi
          docker tag v2xhubarm:ci-build usdotfhwaops/v2xhubarm:${DOCKER_TAG}
          docker tag php_arm:ci-build usdotfhwaops/php_arm:${DOCKER_TAG}
          docker tag port-drayage-webservice_arm:ci-build usdotfhwaops/port-drayage-webservice_arm:${DOCKER_TAG}
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/v2xhubarm:${DOCKER_TAG}
          docker push usdotfhwaops/php_arm:${DOCKER_TAG}
          docker push usdotfhwaops/port-drayage-webservice_arm:${DOCKER_TAG}
  automated_release :
   machine:
    image: ubuntu-2004:202201-02
   steps:
     - run: 
        name: Docker Pull Release
        # Pull all built images associated with github tag
        command: |
          docker pull usdotfhwaops/php:master
          docker pull usdotfhwaops/port-drayage-webservice:master
          docker pull usdotfhwaops/v2xhubamd:master
          docker pull usdotfhwaops/php_arm:master
          docker pull usdotfhwaops/port-drayage-webservice_arm:master
          docker pull usdotfhwaops/v2xhubarm:master
     - run:
        name: Docker Tag Release
        # Tag all pulled images with github tag name
        command: | 
          docker tag usdotfhwaops/php:master usdotfhwaops/php:${CIRCLE_TAG}
          docker tag usdotfhwaops/port-drayage-webservice:master usdotfhwaops/port-drayage-webservice:${CIRCLE_TAG}
          docker tag usdotfhwaops/v2xhubamd:master usdotfhwaops/v2xhubamd:${CIRCLE_TAG}
          docker tag usdotfhwaops/php_arm:master usdotfhwaops/php_arm:${CIRCLE_TAG}
          docker tag usdotfhwaops/port-drayage-webservice_arm:master usdotfhwaops/port-drayage-webservice_arm:${CIRCLE_TAG}
          docker tag usdotfhwaops/v2xhubarm:master usdotfhwaops/v2xhubarm:${CIRCLE_TAG}
     - run:
        name: Docker Push Release Tag
        # Push all tagged images
        command: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/php:${CIRCLE_TAG}
          docker push usdotfhwaops/port-drayage-webservice:${CIRCLE_TAG}
          docker push usdotfhwaops/v2xhubamd:${CIRCLE_TAG}
          docker push usdotfhwaops/php_arm:${CIRCLE_TAG}
          docker push usdotfhwaops/port-drayage-webservice_arm:${CIRCLE_TAG}
          docker push usdotfhwaops/v2xhubarm:${CIRCLE_TAG}
workflows:
  version: 2
  build:
    jobs:
      - sonar-scanner:
          filters:
            branches:
              # only from canonical repository, see https://discuss.circleci.com/t/create-separate-steps-jobs-for-pr-forks-versus-branches/13419/6
              only: /^(?!pull\/).*$/
      - docker_build_push:
          filters:
           tags:
              only: /^[\.0-9]*$/
      - arm_build_push:
          filters:
            tags:
              only: /^[\.0-9]*$/
      - automated_release:
          filters:
            tags:
              only: /^[\.0-9]*$/
            branches:
              ignore: /.*/
