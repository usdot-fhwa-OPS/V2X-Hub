version: 2.1

#  Copyright (C) 2019-2020 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ 
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependencies are available
jobs:
  sonar-scanner:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: usdotfhwaops/v2xhubamd:<< pipeline.git.branch >>
        environment:
          TERM: xterm
          INIT_ENV: /home/V2X-Hub/.base-image/init-env.sh
    # Set working directory
    working_directory: "/home/V2X-Hub"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      - run:
          name: Run Tests & Generate Gcovr Reports
          command: |
            source ${INIT_ENV}
            cd /home/V2X-Hub/src
            build-wrapper-linux-x86-64 --out-dir /home/V2X-Hub/bw-output bash build.sh
            ./coverage.sh
      - run:
          name: Run Sonar Scanner
          command: |
            source ${INIT_ENV}
            echo $PATH
            cd /home/V2X-Hub/src/
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              cd /home/V2X-Hub/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              cd /home/V2X-Hub/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.key=${PR_NUM}             
            fi 
  sonar-scanner_develop:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: usdotfhwaops/v2xhubamd:latest
        environment:
          TERM: xterm
          INIT_ENV: /home/V2X-Hub/.base-image/init-env.sh
    # Set working directory
    working_directory: "/home/V2X-Hub"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      - run:
          name: Run Tests & Generate Gcovr Reports
          command: |
            source ${INIT_ENV}
            cd /home/V2X-Hub/src
            build-wrapper-linux-x86-64 --out-dir /home/V2X-Hub/bw-output bash build.sh
            ./coverage.sh
      - run:
          name: Run Sonar Scanner
          command: |
            source ${INIT_ENV}
            echo $PATH
            cd /home/V2X-Hub/src/
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              cd /home/V2X-Hub/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              cd /home/V2X-Hub/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.key=${PR_NUM}             
            fi 
  docker_build_push :
   machine:
    image: ubuntu-1604:202004-01
   steps:
     - checkout
     - run: 
        name: Docker Build
        # Build v2xhub and php docker branch images
        command: |
          docker build -f docker/php.yml -t usdotfhwaops/php:${CIRCLE_BRANCH,,} .
          docker build -t usdotfhwaops/v2xhubamd:${CIRCLE_BRANCH,,} .  
     - run: 
        name: Docker Push
        # Push v2xhub and php docker images to usdotfhwaops dockerhub
        command: | 
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/v2xhubamd:${CIRCLE_BRANCH,,}
          docker push usdotfhwaops/php:${CIRCLE_BRANCH,,}
  docker_build_push_develop :
   machine:
    image: ubuntu-1604:202004-01
   steps:
     - checkout
     - run: 
        name: Docker Build
        # Build v2xhub and php docker images develop images
        command: |
          docker build -f docker/php.yml -t usdotfhwaops/php:latest .
          docker build -t usdotfhwaops/v2xhubamd:latest .    
     - run: 
        name: Docker Push
        # Push v2xhub and php docker images to usdotfhwaops dockerhub
        command: | 
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/v2xhubamd:latest
          docker push usdotfhwaops/php:latest

  arm_build_push :
   machine:
    image: ubuntu-2004:202101-01
   resource_class: arm.medium
   steps:
     - checkout
     - run: 
        name: Docker Build
        # Run MYSQL image and build v2xhub docker image
        command: |
          docker build -f docker/Dockerfile-depl -t usdotfhwaops/v2xhubarm:${CIRCLE_BRANCH,,} .
    
     - run: 
        name: Docker Push
        # Push v2xhub docker image to usdotfhwaops dockerhub
        command: | 
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/v2xhubarm:${CIRCLE_BRANCH,,}
  arm_build_push_develop :
   machine:
    image: ubuntu-2004:202101-01
   resource_class: arm.medium
   steps:
     - checkout
     - run:
        name: Docker Build
        # Run MYSQL image and build v2xhub docker image develop image
        command: |
          docker build -f docker/Dockerfile-depl -t usdotfhwaops/v2xhubarm:latest .

     - run:
        name: Docker Push
        # Push v2xhub docker image to usdotfhwaops dockerhub
        command: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/v2xhubarm:latest
  port_drayage_webservice_build_develop :
    docker:
      - image: cimg/openjdk:11.0.12
    # Set working directory
    working_directory: "/home/V2X-Hub"
    steps:
     - setup_remote_docker
     - checkout
     - run: 
        name: Maven Build JAR
        # Build Port Drayage Web Service
        command: |
          cd tools/port-drayage-webservice/
          mvn clean install  
     - run: 
        name: Build Docker Image and Push
        # Build and push Port Drayage Web Service Docker images
        command: | 
          cd tools/port-drayage-webservice/
          docker build -t usdotfhwaops/port-drayage-webservice:latest .
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/port-drayage-webservice:latest
  port_drayage_webservice_build :
    docker:
      - image: cimg/openjdk:11.0.12
    # Set working directory
    steps:
     - setup_remote_docker
     - checkout
     - run: 
        name: Maven Build JAR
        # Build Port Drayage Web Service
        command: |
          cd tools/port-drayage-webservice/
          mvn clean install  
     - run: 
        name: Build Docker Image and Push
        # Build and push Port Drayage Web Service Docker images
        command: | 
          cd tools/port-drayage-webservice/
          docker build -t usdotfhwaops/port-drayage-webservice:${CIRCLE_BRANCH,,} .
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwaops/port-drayage-webservice:${CIRCLE_BRANCH,,}
workflows:
  version: 2
  build:
    jobs:
      - docker_build_push_develop:
          filters:
            branches:
              only: develop
      - docker_build_push:
          filters:
           branches:
              ignore: develop
      - arm_build_push:
          filters:
            branches:
               ignore: develop
      - arm_build_push_develop :
          filters:
            branches:
              only: develop
      - sonar-scanner:
          requires:
            - docker_build_push
      - sonar-scanner_develop:
          requires:
            - docker_build_push_develop
      - port_drayage_webservice_build_develop:
          filters:
              branches:
                only: develop
      - port_drayage_webservice_build:
          filters:
            branches:
              ignore: develop
 

