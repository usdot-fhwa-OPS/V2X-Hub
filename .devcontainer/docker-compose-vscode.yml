version: '3.3'

services:
  v2xhub:
    build: 
      context: ..
      dockerfile: .devcontainer/Dockerfile.builder
    container_name: v2xhub
    network_mode: host
    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
      - ..:/workspace:cached
      - ./MAP:/var/www/plugins/MAP
    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"  
    environment:
      - MYSQL_PASSWORD=/run/secrets/mysql_password
      - SIMULATION_MODE=true
      - SIMULATION_IP=127.0.0.1
      - SIMULATION_REGISTRATION_PORT=6767
      - LOCAL_IP=127.0.0.1
      - TIME_SYNC_TOPIC=time_sync
      - TIME_SYNC_PORT=7575
      - SIM_V2X_PORT=5757
      - SIM_INTERACTION_PORT=7576
      - V2X_PORT=8686
      - INFRASTRUCTURE_ID=rsu_<J2735 MAP MESSAGE INTERSECTION ID>
      - INFRASTRUCTURE_NAME=<RSU_NAME>
      - SENSOR_JSON_FILE_PATH=/var/www/plugins/MAP/sensors.json
    secrets:
      - mysql_password

  db:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      - MYSQL_DATABASE=IVP
      - MYSQL_USER=IVP
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql_password
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    network_mode: host
    secrets:
      - mysql_password
      - mysql_root_password
    volumes:
      - ../configuration/amd64/mysql/localhost.sql:/docker-entrypoint-initdb.d/localhost.sql
      # include creation of a user (user/user) to be able to log in
      - ./mysql_add_dev_user.sql:/docker-entrypoint-initdb.d/mysql_add_dev_user.sql
      - mysql-datavolume:/var/lib/mysql

  php:
    image: usdotfhwaops/php:latest
    container_name: php
    network_mode: host
    restart: always
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
       - "2181:2182"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - zookeeper-datavolume:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on: 
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      DOCKER_HOST_IP:  127.0.0.1
      KAFKA_ADVERTISED_HOST_NAME:  127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "time_sync:1:1,modified_spat:1:1,v2xhub_scheduling_plan_sub:1:1,v2xhub_ssm_sub:1:1"
      KAFKA_LOG_DIRS: "/kafka/kafka-logs"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - kafka-datavolume:/kafka/kafka-logs
##############################################################
# Kafka Owl for monitoring kafka traffic. UI can be accessed on 
# configurable port set in performance/kowl.yaml NOTE: IS NOT 
# NECESSARY FOR DEPLOYMENT BUT HELFUL FOR DEBUGGING! 
################################################################
  kowl:
    image: quay.io/cloudhut/kowl
    container_name: kowl
    restart: on-failure
    network_mode: host
    depends_on:
      - kafka
    environment:
      CONFIG_FILEPATH: /etc/kowl/kowl.yaml
    volumes:
      - ../kowl/kowl.yaml:/etc/kowl/kowl.yaml
secrets:
    mysql_password:
        file: ../secrets/mysql_password.txt
    mysql_root_password:
        file: ../secrets/mysql_root_password.txt

volumes:
  mysql-datavolume:
  kafka-datavolume:
  zookeeper-datavolume:
