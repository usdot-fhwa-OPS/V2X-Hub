/**
 * Port Drayage Web Service.
 * Web Service for Loading/Unloading/Inspection interactions for Port Drayage Operations.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIActionStatusList.h"
#include "OAIContainerActionStatus.h"
#include "OAIContainerRequest.h"
#include "OAIInspectionRequest.h"
#include "OAIInspectionStatus.h"
#include "OAIInspectionStatusList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void inspectionCompletePost();


    void inspectionHoldPost();

    /**
    * @param[in]  oai_inspection_request OAIInspectionRequest [required]
    */
    void inspectionHoldingPost(const OAIInspectionRequest &oai_inspection_request);


    void inspectionPendingGet();

    /**
    * @param[in]  oai_inspection_request OAIInspectionRequest [required]
    */
    void inspectionPost(const OAIInspectionRequest &oai_inspection_request);

    /**
    * @param[in]  vehicle_id QString [required]
    */
    void inspectionVehicleIdGet(const QString &vehicle_id);


    void loadingCompletePost();


    void loadingPendingGet();

    /**
    * @param[in]  oai_container_request OAIContainerRequest [required]
    */
    void loadingPost(const OAIContainerRequest &oai_container_request);


    void loadingStartPost();

    /**
    * @param[in]  vehicle_id QString [required]
    */
    void loadingVehicleIdGet(const QString &vehicle_id);


    void unloadingCompletePost();


    void unloadingPendingGet();

    /**
    * @param[in]  oai_container_request OAIContainerRequest [required]
    */
    void unloadingPost(const OAIContainerRequest &oai_container_request);


    void unloadingStartPost();

    /**
    * @param[in]  vehicle_id QString [required]
    */
    void unloadingVehicleIdGet(const QString &vehicle_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;

    void inspectionCompletePostCallback(OAIHttpRequestWorker *worker);
    void inspectionHoldPostCallback(OAIHttpRequestWorker *worker);
    void inspectionHoldingPostCallback(OAIHttpRequestWorker *worker);
    void inspectionPendingGetCallback(OAIHttpRequestWorker *worker);
    void inspectionPostCallback(OAIHttpRequestWorker *worker);
    void inspectionVehicleIdGetCallback(OAIHttpRequestWorker *worker);
    void loadingCompletePostCallback(OAIHttpRequestWorker *worker);
    void loadingPendingGetCallback(OAIHttpRequestWorker *worker);
    void loadingPostCallback(OAIHttpRequestWorker *worker);
    void loadingStartPostCallback(OAIHttpRequestWorker *worker);
    void loadingVehicleIdGetCallback(OAIHttpRequestWorker *worker);
    void unloadingCompletePostCallback(OAIHttpRequestWorker *worker);
    void unloadingPendingGetCallback(OAIHttpRequestWorker *worker);
    void unloadingPostCallback(OAIHttpRequestWorker *worker);
    void unloadingStartPostCallback(OAIHttpRequestWorker *worker);
    void unloadingVehicleIdGetCallback(OAIHttpRequestWorker *worker);

signals:

    void inspectionCompletePostSignal();
    void inspectionHoldPostSignal();
    void inspectionHoldingPostSignal();
    void inspectionPendingGetSignal(OAIInspectionStatusList summary);
    void inspectionPostSignal();
    void inspectionVehicleIdGetSignal(OAIInspectionStatus summary);
    void loadingCompletePostSignal();
    void loadingPendingGetSignal(OAIActionStatusList summary);
    void loadingPostSignal();
    void loadingStartPostSignal();
    void loadingVehicleIdGetSignal(OAIContainerActionStatus summary);
    void unloadingCompletePostSignal();
    void unloadingPendingGetSignal(OAIActionStatusList summary);
    void unloadingPostSignal();
    void unloadingStartPostSignal();
    void unloadingVehicleIdGetSignal(OAIContainerActionStatus summary);

    void inspectionCompletePostSignalFull(OAIHttpRequestWorker *worker);
    void inspectionHoldPostSignalFull(OAIHttpRequestWorker *worker);
    void inspectionHoldingPostSignalFull(OAIHttpRequestWorker *worker);
    void inspectionPendingGetSignalFull(OAIHttpRequestWorker *worker, OAIInspectionStatusList summary);
    void inspectionPostSignalFull(OAIHttpRequestWorker *worker);
    void inspectionVehicleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIInspectionStatus summary);
    void loadingCompletePostSignalFull(OAIHttpRequestWorker *worker);
    void loadingPendingGetSignalFull(OAIHttpRequestWorker *worker, OAIActionStatusList summary);
    void loadingPostSignalFull(OAIHttpRequestWorker *worker);
    void loadingStartPostSignalFull(OAIHttpRequestWorker *worker);
    void loadingVehicleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIContainerActionStatus summary);
    void unloadingCompletePostSignalFull(OAIHttpRequestWorker *worker);
    void unloadingPendingGetSignalFull(OAIHttpRequestWorker *worker, OAIActionStatusList summary);
    void unloadingPostSignalFull(OAIHttpRequestWorker *worker);
    void unloadingStartPostSignalFull(OAIHttpRequestWorker *worker);
    void unloadingVehicleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIContainerActionStatus summary);

    void inspectionCompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionHoldPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionHoldingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionPendingGetSignalE(OAIInspectionStatusList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionVehicleIdGetSignalE(OAIInspectionStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingCompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loadingPendingGetSignalE(OAIActionStatusList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loadingStartPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loadingVehicleIdGetSignalE(OAIContainerActionStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingCompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingPendingGetSignalE(OAIActionStatusList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingStartPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingVehicleIdGetSignalE(OAIContainerActionStatus summary, QNetworkReply::NetworkError error_type, QString error_str);

    void inspectionCompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionHoldPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionHoldingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionPendingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inspectionVehicleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingCompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingPendingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadingVehicleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingCompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingPendingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadingVehicleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
