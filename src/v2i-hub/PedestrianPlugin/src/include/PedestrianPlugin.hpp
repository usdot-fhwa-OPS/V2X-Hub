//==========================================================================
// Name        : PedestrianPlugin.cpp
// Author      : FHWA Saxton Transportation Operations Laboratory  
// Version     :
// Copyright   : Copyright (c) 2024 FHWA Saxton Transportation Operations Laboratory. All rights reserved.
// Description : Pedestrian Plugin
//==========================================================================
#pragma once
#include <string.h>

#include "PluginClient.h"
#include "PluginDataMonitor.h"

#include <atomic>
#include <thread>
#include <mutex>
#include <PersonalSafetyMessage.h>
#include <tmx/j2735_messages/J2735MessageFactory.hpp>

#include <UdpClient.h>
#include <tmx/messages/auto_message.hpp>
#include "PedestrianPluginWorker.hpp"

#include "FLIRWebSockAsyncClnSession.hpp"


#include <QCommandLineOption>
#include <QCommandLineParser>
#include <QCoreApplication>
#include <QHostAddress>
#include <QRegExp>
#include <QStringList>
#include <QSharedPointer>
#include <QObject>

#ifdef __linux__
#include <signal.h>
#include <unistd.h>
#endif
#include <qhttpengine/server.h>
#include <qserverPedestrian/OAIApiRouter.h>
#include <qserverPedestrian/OAIPSM.h>
#include <queue>

namespace PedestrianPlugin
{

/**
 * @brief Plugin used to encode Personal Safety Messages (PSMs) 
 * from an XML input via HTTP POST or metadata received from the FLIR API.
 */
class PedestrianPlugin: public PluginClient
{
public:
	explicit PedestrianPlugin(const std::string &name);
	int Main() override;

protected:
	/**
	 * @brief Called everytime a configuration value is changed for the plugin.
	 */
	void UpdateConfigSettings();
	// Virtual method overrides START
	/**
	 * @brief Overrides PluginClient OnConfigChanged(const char *key, const char *value) method
	 * and calls UpdateConfigSettings() on each configuration change.
	 * @param key string key of the configuration value that has changed.
	 * @param value new value of the configuration that has changed.
	 */
	void OnConfigChanged(const char *key, const char *value) override;
	/**
	 * @brief Overrides PluginClient OnStateChange(IvpPluginState state) method.
	 * @param state new state of the plugin.
	 */
	void OnStateChange(IvpPluginState state) override;
	// Virtual method overrides END.

	/**
	 * @brief Add DSRC metadata and broadcast PSM
	 * @param string PSM in JSON format
	 */
	void BroadcastPsm(const std::string &psmJson);

	/**
	 * @brief Starts WebService to handle incoming HTTP POST requests.
	 */
	int  StartWebService();
	/**
	 * @brief Starts Asyncronous WebSocket Client to connect to FLIR WebSocket Server.
	 */
	int  StartWebSocket();
	/**
	 * @brief Stops WebService before FLIR WebSocket enabled. 
	 */
	void StopWebService();
	/**
	 * @brief Stops WebSocket Client session before HTTP POST WebService is enabled. 
	 */
	void StopWebSocket();
	/**
	 * @brief Handles HTTP POST requests and sends response to sender. 
	 * If valid XML is received, sends data to BroadcastPsm.
	 * @param QHttpEngine::Socket Socket created in WebService. 
	 */
	void PedestrianRequestHandler(QHttpEngine::Socket *socket);
	/**
	 * @brief Sends new PSM XMLs generated by FLIR WebSocket session to BroadcastPsm.
	 */
	void checkXML();
	
private:
	J2735MessageFactory factory;
	
	std::mutex _cfgLock;
	
	uint16_t webport;
	std::string webip; 
	std::string webSocketIP;
	std::string webSocketURLExt;
	std::string dataprovider;
	float cameraRotation;
	std::shared_ptr<FLIRWebSockAsyncClnSession> flirSession;
	std::string hostString;

	bool runningWebSocket = false;
    bool runningWebService = false;

	// The io_context is required for all I/O
    net::io_context ioc;

	// TODO: Set an endpoint for PSM post messages and update documentation.
	// API URL to accept PSM XML
	const QString PSM_Receive = "";
};

};
