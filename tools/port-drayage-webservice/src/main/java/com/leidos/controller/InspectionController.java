package com.leidos.controller;

import com.baeldung.openapi.api.InspectionApi;
import com.baeldung.openapi.model.InspectionRequest;
import com.baeldung.openapi.model.InspectionStatus;
import com.baeldung.openapi.model.InspectionStatusList;
import com.leidos.inspection.InspectionActions;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * {@link RestController} for all inspection/ REST endpoints. Implements
 * {@link InspectionApi} generated by openapi-generator-maven-plugin (see
 * pom.xml), which configures endpoint content type, response type and path.
 * 
 * @author Paul Bourelly
 */
@RestController
public class InspectionController implements InspectionApi {

    private static Logger logger = LoggerFactory.getLogger(InspectionController.class);

    // Injected InspectionActions spring bean
    @Autowired
    private InspectionActions inspectionActions;

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<InspectionStatusList> inspectionPendingGet() {
        return ResponseEntity.ok(inspectionActions.getPendingInspections());

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<InspectionStatus> inspectionVehicleIdGet(String vehicleId) {
        InspectionStatus status = inspectionActions.getInspectionStatus(vehicleId);
        if (status != null)
            return ResponseEntity.ok(status);
        logger.warn(String.format("No inspection found for vehicle id %s", vehicleId));
        return new ResponseEntity<InspectionStatus>(HttpStatus.BAD_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionPost(InspectionRequest request) {
        inspectionActions.requestInspectionAction(request);
        return new ResponseEntity<>(HttpStatus.CREATED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionHoldingPost(InspectionRequest request) {
        if (request.getVehicleId().equals(inspectionActions.getCurrentInspection().getVehicleId())
                && request.getContainerId().equals(inspectionActions.getCurrentInspection().getContainerId())) {
            inspectionActions.requestHolding();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            logger.warn(String.format("Request for %s is not current inspection %s ", request.toString(),
                    inspectionActions.getCurrentInspection().toString()));
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionCompletePost() {
        InspectionStatus cur = inspectionActions.getCurrentInspection();
        if (cur != null) {
            inspectionActions.completeInspection();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionHoldPost() {
        InspectionStatus cur = inspectionActions.getCurrentInspection();
        if (cur != null) {
            inspectionActions.proceedToHolding();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

}
