package com.leidos.controller;

import com.baeldung.openapi.api.InspectionApi;
import com.baeldung.openapi.model.InspectionRequest;
import com.baeldung.openapi.model.InspectionStatus;
import com.baeldung.openapi.model.InspectionStatusList;
import com.baeldung.openapi.model.InspectionStatus.StatusEnum;
import com.leidos.inspection.InspectionActions;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * {@link RestController} for all inspection/ REST endpoints. Implements
 * {@link InspectionApi} generated by openapi-generator-maven-plugin (see
 * pom.xml), which configures endpoint content type, response type and path.
 * 
 * @author Paul Bourelly
 */
@RestController
public class InspectionController implements InspectionApi {

    private static Logger logger = LoggerFactory.getLogger(InspectionController.class);

    // Injected InspectionActions spring bean
    @Autowired
    private InspectionActions inspectionActions;

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<InspectionStatusList> inspectionPendingGet() {
        return ResponseEntity.ok(inspectionActions.getPendingInspections());

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<InspectionStatus> inspectionActionIdGet(String actionId) {
        logger.debug(String.format("Received GET inspection/%s .", actionId));
        InspectionStatus status = inspectionActions.getInspectionStatus(actionId);
        if (status != null)
            return ResponseEntity.ok(status);
        return new ResponseEntity<InspectionStatus>(HttpStatus.BAD_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionPost(InspectionRequest request) {
        logger.debug(String.format("Received POST inspection/ with payload : %s .", request));
        // Assure there is not current inspection with action_id
        if (inspectionActions.getInspectionStatus(request.getActionId()) == null) {
            inspectionActions.requestInspectionAction(request);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            logger.warn(String.format("Action with action ID %s already exists! Discarding potential duplicate request",
                    request.getActionId()));
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionHoldingActionIdPost(String actionId) {
        logger.debug(String.format("Received POST inspection/holding/%s .", actionId));
        InspectionStatus cur = inspectionActions.getCurrentInspection();
        // Check that action is current action and that status is PROCEED_TO_HOLDING
        if (cur != null && cur.getActionId().equals(actionId)
                && cur.getStatus().equals(StatusEnum.PROCEED_TO_HOLDING)) {
            inspectionActions.requestHolding();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            logger.warn(String.format(
                    "Action ID %s is not current inspection %s or does not have a status of PROCEED_TO_HOLDING AREA.\n Discarding potential duplicate request.",
                    actionId, inspectionActions.getCurrentInspection().toString()));
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionCompleteActionIdPost(String actionId) {
        logger.debug(String.format("Received POST inspection/complete/%s .", actionId));
        InspectionStatus cur = inspectionActions.getCurrentInspection();
        if (cur != null && cur.getActionId().equals(actionId)) {
            inspectionActions.completeInspection();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> inspectionHoldActionIdPost(String actionId) {
        logger.debug(String.format("Received POST inspection/hold/%s .", actionId));
        InspectionStatus cur = inspectionActions.getCurrentInspection();
        if (cur != null && cur.getActionId().equals(actionId)) {
            inspectionActions.proceedToHolding();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

}
