package com.leidos.controller;

import com.baeldung.openapi.api.UnloadingApi;
import com.baeldung.openapi.model.ActionStatusList;
import com.baeldung.openapi.model.ContainerActionStatus;
import com.baeldung.openapi.model.ContainerRequest;
import com.leidos.unloading.UnloadingActions;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * {@link RestController} for all /unloading REST API endpoints. Implements
 * {@link Unloading} interface generated by openapi codegen to define methods of
 * endpoint responses.
 * 
 * @author Paul Bourelly
 */
@RestController
public class UnloadingController implements UnloadingApi {

    Logger logger = LoggerFactory.getLogger(UnloadingController.class);

    /**
     * Injected {@link UnloadingActions} Spring Bean
     */
    @Autowired
    UnloadingActions unloadingActions;

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<ActionStatusList> unloadingPendingGet() {
        return ResponseEntity.ok(unloadingActions.getPendingActions());

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<ContainerActionStatus> unloadingActionIdGet(String actionId) {
        logger.debug(String.format("Received GET unloading/%s .", actionId));
        ContainerActionStatus action = unloadingActions.getContainerActionStatus(actionId);
        if (action != null)
            return ResponseEntity.ok(action);
        return new ResponseEntity<ContainerActionStatus>(HttpStatus.BAD_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> unloadingPost(ContainerRequest request) {
        logger.debug(String.format("Received POST unloading/ with payload : %s .", request));
        // Check no action already exists for given action ID
        if (unloadingActions.getContainerActionStatus(request.getActionId()) == null) {
            unloadingActions.requestUnloadingAction(request);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            logger.warn(String.format("Action with action ID %s already exists! Discarding potential duplicate request",
                    request.getActionId()));
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> unloadingStartActionIdPost(String actionId) {
        logger.debug(String.format("Received POST unloading/start/%s .", actionId));
        ContainerActionStatus cur = unloadingActions.getCurrentAction();
        if (cur != null && cur.getActionId().equals(actionId)) {
            unloadingActions.startCurrentAction();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResponseEntity<Void> unloadingCompleteActionIdPost(String actionId) {
        logger.debug(String.format("Received POST unloading/complete/%s .", actionId));
        ContainerActionStatus cur = unloadingActions.getCurrentAction();
        if (cur != null && cur.getActionId().equals(actionId)) {
            unloadingActions.completeCurrentAction();
            return new ResponseEntity<>(HttpStatus.CREATED);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

    }
}
